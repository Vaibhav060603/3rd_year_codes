package lpi;

class worst
{
	public int maxi(int [] available)
	{
		int max=available[0];
		
		for(int i=0;i<available.length;i++)
		{
			if(available[i]>max)
			{
				max=available[i];
			}
		}
		return max;
	}
	
	public int maxindex(int [] available)
	{
		int max=maxi(available);
		int maxindex=0;
		
		for(int i=0;i<available.length;i++)
		{
			if(available[i]==max)
			{
				maxindex=i;
			}
		}
		return maxindex;
	}
	
	
	public void worstfit(int process[],int available[])
	{
		int prolength = process.length;
		int availlength = available.length;
		int maxind;
		int max;
		
		int allocation[] = new int[prolength];
		
		for(int i=0;i<allocation.length;i++)
		{
			allocation[i]=-1;
		}
		
		for(int i=0;i<prolength;i++)
		{
			maxind=maxindex(available);
			max=maxi(available);
			
			if(process[i]<max)
			{
				available[maxind]-=process[i];
				allocation[i]=maxind;
			}
		}
		
		for(int i=0;i<allocation.length;i++)
		{
			if(allocation[i]!=-1)
			{
				System.out.println(allocation[i]);
			}
			
			else
			{
				System.out.println("Required space not available");
			}
		}
	}	
}



public class worstfit 
{
	public static void main(String [] args)
	{
		worst w=new worst();
		
		int [] available = {100,200,400,250,350,130};
		int [] process = {121,230,200,273,151,160,300};
		
		w.worstfit(process,available);
	}
}
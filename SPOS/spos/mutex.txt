import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

class LockerRoom{
    public static ReentrantLock locker = new ReentrantLock();

    public static void UseBank(int personId){
        try{
            locker.lock();
            System.out.println("The person "+personId+" using the bank right now");
            Thread.sleep(200);
            System.out.println("The person "+personId+" completes his bank work");
        }
        catch (InterruptedException e){
            e.printStackTrace();
        }
        finally {
            locker.unlock();
        }
    }
}

class Person1 implements Runnable{
    public int personId;
    public LockerRoom lock;

    public Person1(int personId,LockerRoom lock){
        this.personId=personId;
        this.lock=lock;
    }

    @Override
    public void run(){
        LockerRoom.UseBank(personId);
    }
}
public class mutex {
    public static void main(String [] args){
        LockerRoom lock = new LockerRoom();
        int totalPeople =10;
        for(int i=0;i<totalPeople;i++){
            Thread banker = new Thread(new Person1(i,lock));
            banker.start();
        }
    }
}